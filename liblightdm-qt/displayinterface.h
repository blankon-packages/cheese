/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp ../src/display.xml -i ldmauthrequest.h -c DisplayInterface -p displayinterface
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DISPLAYINTERFACE_H_1291852871
#define DISPLAYINTERFACE_H_1291852871

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "ldmauthrequest.h"

/*
 * Proxy class for interface org.lightdm.LightDisplayManager.Greeter
 */
class DisplayInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.lightdm.LightDisplayManager.Greeter"; }

public:
    DisplayInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DisplayInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, QString, QString, QString, QString, int> Connect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Connect"), argumentList);
    }
    inline QDBusReply<QString> Connect(QString &language, QString &layout, QString &session, QString &username, int &delay)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("Connect"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 6) {
            language = qdbus_cast<QString>(reply.arguments().at(1));
            layout = qdbus_cast<QString>(reply.arguments().at(2));
            session = qdbus_cast<QString>(reply.arguments().at(3));
            username = qdbus_cast<QString>(reply.arguments().at(4));
            delay = qdbus_cast<int>(reply.arguments().at(5));
        }
        return reply;
    }

    inline QDBusPendingReply<int, QList<LdmAuthRequest> > ContinueAuthentication(const QStringList &secrets)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(secrets);
        return asyncCallWithArgumentList(QLatin1String("ContinueAuthentication"), argumentList);
    }
    inline QDBusReply<int> ContinueAuthentication(const QStringList &secrets, QList<LdmAuthRequest> &requests)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(secrets);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ContinueAuthentication"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            requests = qdbus_cast<QList<LdmAuthRequest> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> Login(const QString &username, const QString &session, const QString &language)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(session) << qVariantFromValue(language);
        return asyncCallWithArgumentList(QLatin1String("Login"), argumentList);
    }

    inline QDBusPendingReply<int, QList<LdmAuthRequest> > StartAuthentication(const QString &username)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username);
        return asyncCallWithArgumentList(QLatin1String("StartAuthentication"), argumentList);
    }
    inline QDBusReply<int> StartAuthentication(const QString &username, QList<LdmAuthRequest> &requests)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("StartAuthentication"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            requests = qdbus_cast<QList<LdmAuthRequest> >(reply.arguments().at(1));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
    void QuitGreeter();
};

namespace org {
  namespace lightdm {
    namespace LightDisplayManager {
      typedef ::DisplayInterface Greeter;
    }
  }
}
#endif
